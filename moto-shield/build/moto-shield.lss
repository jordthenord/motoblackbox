
moto-shield:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  000005c0  00000654  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800202  00800202  00000656  2**0
                  ALLOC
  3 .stab         0000126c  00000000  00000000  00000658  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a4b  00000000  00000000  000018c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000230f  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__vector_32>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 ec       	ldi	r30, 0xC0	; 192
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 31       	cpi	r26, 0x10	; 16
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 a4 02 	call	0x548	; 0x548 <main>
 122:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <initUSARTRaspi>:
/**
 * Receive only.
 */
void initUSARTRaspi (void)
{
        UCSR2B |= (1 << TXEN2); // only transmission
 12a:	e1 ed       	ldi	r30, 0xD1	; 209
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	88 60       	ori	r24, 0x08	; 8
 132:	80 83       	st	Z, r24
        UCSR2C |= (1 << UCSZ21) | (1 << UCSZ20); // standard config : 8bits
 134:	e2 ed       	ldi	r30, 0xD2	; 210
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	86 60       	ori	r24, 0x06	; 6
 13c:	80 83       	st	Z, r24
        UBRR2H = (BAUD_PRESCALE_RASPI >> 8);
 13e:	10 92 d5 00 	sts	0x00D5, r1
        UBRR2L = BAUD_PRESCALE_RASPI;
 142:	89 e1       	ldi	r24, 0x19	; 25
 144:	80 93 d4 00 	sts	0x00D4, r24
 148:	08 95       	ret

0000014a <initUSARTEcu>:
 * Transmission only.
 */
void initUSARTEcu (void)
{
//        UCSR1B |= (1 << RXEN1) | (1 << RXCIE1); // Enable data reception and interrupt.
        UCSR1B |= (1 << RXEN1); // Enable data reception
 14a:	e9 ec       	ldi	r30, 0xC9	; 201
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	80 61       	ori	r24, 0x10	; 16
 152:	80 83       	st	Z, r24
        UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
 154:	ea ec       	ldi	r30, 0xCA	; 202
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	86 60       	ori	r24, 0x06	; 6
 15c:	80 83       	st	Z, r24
        UBRR1H = (BAUD_PRESCALE_ECU >> 8);
 15e:	10 92 cd 00 	sts	0x00CD, r1
        UBRR1L = BAUD_PRESCALE_ECU;
 162:	8d e3       	ldi	r24, 0x3D	; 61
 164:	80 93 cc 00 	sts	0x00CC, r24
 168:	08 95       	ret

0000016a <initTimer>:
/**
 * Timer at full speed, CTC mode.
 */
void initTimer (void)
{
        TCCR3B |= (1 << WGM32) ; // Configure timer 1 for CTC mode
 16a:	e1 e9       	ldi	r30, 0x91	; 145
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	88 60       	ori	r24, 0x08	; 8
 172:	80 83       	st	Z, r24
        TIMSK3 |= (1 << OCIE3A) ; // Enable CTC interrupt
 174:	a1 e7       	ldi	r26, 0x71	; 113
 176:	b0 e0       	ldi	r27, 0x00	; 0
 178:	8c 91       	ld	r24, X
 17a:	82 60       	ori	r24, 0x02	; 2
 17c:	8c 93       	st	X, r24
        OCR3A = F_CPU / 250 - 1; // (250 times per second) = 4 ms when @16MHz, CTC.
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	99 ef       	ldi	r25, 0xF9	; 249
 182:	90 93 99 00 	sts	0x0099, r25
 186:	80 93 98 00 	sts	0x0098, r24
        TCCR3B |= (1 << CS30); // Counter running at FCPU speed.
 18a:	80 81       	ld	r24, Z
 18c:	81 60       	ori	r24, 0x01	; 1
 18e:	80 83       	st	Z, r24
 190:	08 95       	ret

00000192 <initInitGPIO>:
}

void initInitGPIO (void)
{
        // All as input
        DDR_GPIO = 0x00;
 192:	11 b8       	out	0x01, r1	; 1

        // Debug outputs for analyzer.
        DDRE = (1 << PE4) | (1 << PE5);
 194:	80 e3       	ldi	r24, 0x30	; 48
 196:	8d b9       	out	0x0d, r24	; 13
 198:	08 95       	ret

0000019a <initADC>:
 */
void initADC (void)
{
        // Free running mode - this line is of cource not necessary, but i put it for the sake of completness.
        // No MUX values needed to be changed to use ADC0
        ADCSRB &= ~(1 << ADTS2) | ~(1 << ADTS1) | ~(1 << ADTS0);
 19a:	eb e7       	ldi	r30, 0x7B	; 123
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	80 83       	st	Z, r24

        // Reference Selection : AVCC with external capacitor at AREF pin
        ADMUX |= (1 << REFS0);
 1a2:	ec e7       	ldi	r30, 0x7C	; 124
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	80 64       	ori	r24, 0x40	; 64
 1aa:	80 83       	st	Z, r24
        ADMUX |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading
 1ac:	80 81       	ld	r24, Z
 1ae:	80 62       	ori	r24, 0x20	; 32
 1b0:	80 83       	st	Z, r24

        ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // ADC clock signal prescaler. Divide by 128.
 1b2:	ea e7       	ldi	r30, 0x7A	; 122
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	87 60       	ori	r24, 0x07	; 7
 1ba:	80 83       	st	Z, r24
        ADCSRA |= (1 << ADEN); // Enable ADC
 1bc:	80 81       	ld	r24, Z
 1be:	80 68       	ori	r24, 0x80	; 128
 1c0:	80 83       	st	Z, r24
        ADCSRA |= (1 << ADSC); // Start A2D Conversions
 1c2:	80 81       	ld	r24, Z
 1c4:	80 64       	ori	r24, 0x40	; 64
 1c6:	80 83       	st	Z, r24
 1c8:	08 95       	ret

000001ca <poll1>:
 * Wait for 1 byte from UART1.
 */
uint8_t poll1 (void)
{
        // Debug output.
        PORTE |= 1 << PE4;
 1ca:	74 9a       	sbi	0x0e, 4	; 14

        ATOMIC_BLOCK (ATOMIC_RESTORESTATE) {
 1cc:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 1ce:	f8 94       	cli
                lastEcuReadTime = currentTime;
 1d0:	80 91 08 02 	lds	r24, 0x0208
 1d4:	90 91 09 02 	lds	r25, 0x0209
 1d8:	90 93 07 02 	sts	0x0207, r25
 1dc:	80 93 06 02 	sts	0x0206, r24
                waitForEcu = 1;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	80 93 00 02 	sts	0x0200, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 1e6:	2f bf       	out	0x3f, r18	; 63
        }

        while ((UCSR1A & (1 << RXC1)) == 0 && waitForEcu)
 1e8:	80 91 c8 00 	lds	r24, 0x00C8
 1ec:	87 fd       	sbrc	r24, 7
 1ee:	04 c0       	rjmp	.+8      	; 0x1f8 <poll1+0x2e>
 1f0:	80 91 00 02 	lds	r24, 0x0200
 1f4:	81 11       	cpse	r24, r1
 1f6:	f8 cf       	rjmp	.-16     	; 0x1e8 <poll1+0x1e>
                ;

        // Debug output.
        PORTE &= ~(1 << PE4);
 1f8:	74 98       	cbi	0x0e, 4	; 14

        if (!waitForEcu) {
 1fa:	80 91 00 02 	lds	r24, 0x0200
 1fe:	88 23       	and	r24, r24
 200:	19 f0       	breq	.+6      	; 0x208 <poll1+0x3e>
                return 0x00;
        }

        return UDR1;
 202:	80 91 ce 00 	lds	r24, 0x00CE
 206:	08 95       	ret

        // Debug output.
        PORTE &= ~(1 << PE4);

        if (!waitForEcu) {
                return 0x00;
 208:	80 e0       	ldi	r24, 0x00	; 0
        }

        return UDR1;
}
 20a:	08 95       	ret

0000020c <validateECUFrame>:
 * Ecu frames from mitsubishi ECU computer have a checksum at the end, and controll byte at the
 * beginnig (0x01 in my case). Thus checking them for validity is to check first byte and if
 * it's correct, check the checksum of entire frame.
 */
uint8_t validateECUFrame (EcuFrame *ecuFrame)
{
 20c:	ef 92       	push	r14
 20e:	ff 92       	push	r15
 210:	0f 93       	push	r16
 212:	1f 93       	push	r17
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	fc 01       	movw	r30, r24
        uint8_t start = ecuFrame->start;
 21a:	26 81       	ldd	r18, Z+6	; 0x06
        PORTE &= 1 << PE5;
 21c:	8e b1       	in	r24, 0x0e	; 14
 21e:	80 72       	andi	r24, 0x20	; 32
 220:	8e b9       	out	0x0e, r24	; 14

        if (ecuFrame->buffer[start] != ECU_COMMAND_BYTE) {
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	df 01       	movw	r26, r30
 226:	a2 0f       	add	r26, r18
 228:	b3 1f       	adc	r27, r19
 22a:	8c 91       	ld	r24, X
 22c:	81 30       	cpi	r24, 0x01	; 1
 22e:	d1 f5       	brne	.+116    	; 0x2a4 <validateECUFrame+0x98>
                return 0;
        }

        PORTE ^= 1 << PE5;
 230:	8e b1       	in	r24, 0x0e	; 14
 232:	90 e2       	ldi	r25, 0x20	; 32
 234:	89 27       	eor	r24, r25
 236:	8e b9       	out	0x0e, r24	; 14
        uint8_t checksum = ecuFrame->buffer[(start + 1) % ECU_FRAME_SIZE] +
                           ecuFrame->buffer[(start + 2) % ECU_FRAME_SIZE] +
                           ecuFrame->buffer[(start + 3) % ECU_FRAME_SIZE] +
                           ecuFrame->buffer[(start + 4) % ECU_FRAME_SIZE];

        if (ecuFrame->buffer[(start + 5) % ECU_FRAME_SIZE] != checksum) {
 238:	c9 01       	movw	r24, r18
 23a:	05 96       	adiw	r24, 0x05	; 5
 23c:	c6 e0       	ldi	r28, 0x06	; 6
 23e:	d0 e0       	ldi	r29, 0x00	; 0
 240:	be 01       	movw	r22, r28
 242:	0e 94 b6 02 	call	0x56c	; 0x56c <__divmodhi4>
 246:	8c 01       	movw	r16, r24
 248:	0e 0f       	add	r16, r30
 24a:	1f 1f       	adc	r17, r31
                return 0;
        }

        PORTE ^= 1 << PE5;
        uint8_t checksum = ecuFrame->buffer[(start + 1) % ECU_FRAME_SIZE] +
                           ecuFrame->buffer[(start + 2) % ECU_FRAME_SIZE] +
 24c:	c9 01       	movw	r24, r18
 24e:	02 96       	adiw	r24, 0x02	; 2
 250:	be 01       	movw	r22, r28
 252:	0e 94 b6 02 	call	0x56c	; 0x56c <__divmodhi4>
 256:	7c 01       	movw	r14, r24
 258:	ee 0e       	add	r14, r30
 25a:	ff 1e       	adc	r15, r31
        if (ecuFrame->buffer[start] != ECU_COMMAND_BYTE) {
                return 0;
        }

        PORTE ^= 1 << PE5;
        uint8_t checksum = ecuFrame->buffer[(start + 1) % ECU_FRAME_SIZE] +
 25c:	c9 01       	movw	r24, r18
 25e:	01 96       	adiw	r24, 0x01	; 1
 260:	be 01       	movw	r22, r28
 262:	0e 94 b6 02 	call	0x56c	; 0x56c <__divmodhi4>
 266:	8e 0f       	add	r24, r30
 268:	9f 1f       	adc	r25, r31
 26a:	d7 01       	movw	r26, r14
 26c:	4c 91       	ld	r20, X
 26e:	dc 01       	movw	r26, r24
 270:	8c 91       	ld	r24, X
 272:	48 0f       	add	r20, r24
                           ecuFrame->buffer[(start + 2) % ECU_FRAME_SIZE] +
                           ecuFrame->buffer[(start + 3) % ECU_FRAME_SIZE] +
 274:	c9 01       	movw	r24, r18
 276:	03 96       	adiw	r24, 0x03	; 3
 278:	be 01       	movw	r22, r28
 27a:	0e 94 b6 02 	call	0x56c	; 0x56c <__divmodhi4>
 27e:	8e 0f       	add	r24, r30
 280:	9f 1f       	adc	r25, r31
        if (ecuFrame->buffer[start] != ECU_COMMAND_BYTE) {
                return 0;
        }

        PORTE ^= 1 << PE5;
        uint8_t checksum = ecuFrame->buffer[(start + 1) % ECU_FRAME_SIZE] +
 282:	dc 01       	movw	r26, r24
 284:	8c 91       	ld	r24, X
 286:	48 0f       	add	r20, r24
                           ecuFrame->buffer[(start + 2) % ECU_FRAME_SIZE] +
                           ecuFrame->buffer[(start + 3) % ECU_FRAME_SIZE] +
                           ecuFrame->buffer[(start + 4) % ECU_FRAME_SIZE];
 288:	c9 01       	movw	r24, r18
 28a:	04 96       	adiw	r24, 0x04	; 4
 28c:	be 01       	movw	r22, r28
 28e:	0e 94 b6 02 	call	0x56c	; 0x56c <__divmodhi4>
 292:	8e 0f       	add	r24, r30
 294:	9f 1f       	adc	r25, r31
        if (ecuFrame->buffer[start] != ECU_COMMAND_BYTE) {
                return 0;
        }

        PORTE ^= 1 << PE5;
        uint8_t checksum = ecuFrame->buffer[(start + 1) % ECU_FRAME_SIZE] +
 296:	fc 01       	movw	r30, r24
 298:	80 81       	ld	r24, Z
 29a:	48 0f       	add	r20, r24
                           ecuFrame->buffer[(start + 2) % ECU_FRAME_SIZE] +
                           ecuFrame->buffer[(start + 3) % ECU_FRAME_SIZE] +
                           ecuFrame->buffer[(start + 4) % ECU_FRAME_SIZE];

        if (ecuFrame->buffer[(start + 5) % ECU_FRAME_SIZE] != checksum) {
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	d8 01       	movw	r26, r16
 2a0:	9c 91       	ld	r25, X
 2a2:	94 13       	cpse	r25, r20
{
        uint8_t start = ecuFrame->start;
        PORTE &= 1 << PE5;

        if (ecuFrame->buffer[start] != ECU_COMMAND_BYTE) {
                return 0;
 2a4:	80 e0       	ldi	r24, 0x00	; 0
        if (ecuFrame->buffer[(start + 5) % ECU_FRAME_SIZE] != checksum) {
                return 0;
        }

        return 1;
}
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	1f 91       	pop	r17
 2ac:	0f 91       	pop	r16
 2ae:	ff 90       	pop	r15
 2b0:	ef 90       	pop	r14
 2b2:	08 95       	ret

000002b4 <fillFrame>:
/**
 * Wait for ECU_COMMAND_BYTE, and then fill frame with 5 following consecutive bytes thus fillig
 * the buffer completely.
 */
void fillFrame (EcuFrame *ecuFrame)
{
 2b4:	0f 93       	push	r16
 2b6:	1f 93       	push	r17
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
 2bc:	ec 01       	movw	r28, r24
        // Wit for command byte to appear (value 0x01).
        while (poll1 () != ECU_COMMAND_BYTE && waitForEcu)
 2be:	0e 94 e5 00 	call	0x1ca	; 0x1ca <poll1>
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	21 f0       	breq	.+8      	; 0x2ce <fillFrame+0x1a>
 2c6:	80 91 00 02 	lds	r24, 0x0200
 2ca:	81 11       	cpse	r24, r1
 2cc:	f8 cf       	rjmp	.-16     	; 0x2be <fillFrame+0xa>
                ;

        if (!waitForEcu) {
 2ce:	80 91 00 02 	lds	r24, 0x0200
 2d2:	88 23       	and	r24, r24
 2d4:	e9 f0       	breq	.+58     	; 0x310 <fillFrame+0x5c>
                return;
        }

        // Store it in the buffer. It may be some other 0x01 than the command.
        ecuFrame->buffer[0] = ECU_COMMAND_BYTE;
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	88 83       	st	Y, r24
 2da:	00 e0       	ldi	r16, 0x00	; 0
 2dc:	10 e0       	ldi	r17, 0x00	; 0
 2de:	10 c0       	rjmp	.+32     	; 0x300 <fillFrame+0x4c>

        for (uint8_t i = 1; i < ECU_FRAME_SIZE && waitForEcu; ++i) {
                ecuFrame->buffer[i] = poll1 ();
 2e0:	0e 94 e5 00 	call	0x1ca	; 0x1ca <poll1>

/**
 * Wait for ECU_COMMAND_BYTE, and then fill frame with 5 following consecutive bytes thus fillig
 * the buffer completely.
 */
void fillFrame (EcuFrame *ecuFrame)
 2e4:	fe 01       	movw	r30, r28
 2e6:	e0 0f       	add	r30, r16
 2e8:	f1 1f       	adc	r31, r17

        // Store it in the buffer. It may be some other 0x01 than the command.
        ecuFrame->buffer[0] = ECU_COMMAND_BYTE;

        for (uint8_t i = 1; i < ECU_FRAME_SIZE && waitForEcu; ++i) {
                ecuFrame->buffer[i] = poll1 ();
 2ea:	81 83       	std	Z+1, r24	; 0x01
 2ec:	0f 5f       	subi	r16, 0xFF	; 255
 2ee:	1f 4f       	sbci	r17, 0xFF	; 255
        }

        // Store it in the buffer. It may be some other 0x01 than the command.
        ecuFrame->buffer[0] = ECU_COMMAND_BYTE;

        for (uint8_t i = 1; i < ECU_FRAME_SIZE && waitForEcu; ++i) {
 2f0:	05 30       	cpi	r16, 0x05	; 5
 2f2:	11 05       	cpc	r17, r1
 2f4:	29 f4       	brne	.+10     	; 0x300 <fillFrame+0x4c>
                ecuFrame->buffer[i] = poll1 ();
        }

        if (!waitForEcu) {
 2f6:	80 91 00 02 	lds	r24, 0x0200
 2fa:	81 11       	cpse	r24, r1
 2fc:	06 c0       	rjmp	.+12     	; 0x30a <fillFrame+0x56>
 2fe:	08 c0       	rjmp	.+16     	; 0x310 <fillFrame+0x5c>
        }

        // Store it in the buffer. It may be some other 0x01 than the command.
        ecuFrame->buffer[0] = ECU_COMMAND_BYTE;

        for (uint8_t i = 1; i < ECU_FRAME_SIZE && waitForEcu; ++i) {
 300:	80 91 00 02 	lds	r24, 0x0200
 304:	81 11       	cpse	r24, r1
 306:	ec cf       	rjmp	.-40     	; 0x2e0 <fillFrame+0x2c>
 308:	f6 cf       	rjmp	.-20     	; 0x2f6 <fillFrame+0x42>

        if (!waitForEcu) {
                return;
        }

        ecuFrame->size = ECU_FRAME_SIZE;
 30a:	86 e0       	ldi	r24, 0x06	; 6
 30c:	8f 83       	std	Y+7, r24	; 0x07
        ecuFrame->start = 0;
 30e:	1e 82       	std	Y+6, r1	; 0x06
}
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	1f 91       	pop	r17
 316:	0f 91       	pop	r16
 318:	08 95       	ret

0000031a <rotateFrame1>:

/**
 * Read next byte (only one) and rotate the buffer.
 */
void rotateFrame1 (EcuFrame *ecuFrame)
{
 31a:	0f 93       	push	r16
 31c:	1f 93       	push	r17
 31e:	cf 93       	push	r28
 320:	df 93       	push	r29
 322:	ec 01       	movw	r28, r24
//        PORTE &= 1 << PE5;
        if (ecuFrame->size < ECU_FRAME_SIZE) {
 324:	8f 81       	ldd	r24, Y+7	; 0x07
 326:	86 30       	cpi	r24, 0x06	; 6
 328:	80 f0       	brcs	.+32     	; 0x34a <rotateFrame1+0x30>
                return;
        }

        // Overwrite the oldest byte (starting byte)
        ecuFrame->buffer[ecuFrame->start] = poll1 ();
 32a:	0e 81       	ldd	r16, Y+6	; 0x06
 32c:	10 e0       	ldi	r17, 0x00	; 0
 32e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <poll1>
 332:	fe 01       	movw	r30, r28
 334:	e0 0f       	add	r30, r16
 336:	f1 1f       	adc	r31, r17
 338:	80 83       	st	Z, r24
        ecuFrame->start = (ecuFrame->start + 1) %  ECU_FRAME_SIZE;
 33a:	8e 81       	ldd	r24, Y+6	; 0x06
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	01 96       	adiw	r24, 0x01	; 1
 340:	66 e0       	ldi	r22, 0x06	; 6
 342:	70 e0       	ldi	r23, 0x00	; 0
 344:	0e 94 b6 02 	call	0x56c	; 0x56c <__divmodhi4>
 348:	8e 83       	std	Y+6, r24	; 0x06
//        PORTE ^= 1 << PE5;
}
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	1f 91       	pop	r17
 350:	0f 91       	pop	r16
 352:	08 95       	ret

00000354 <commitEcuData>:

/**
 * Store received ecu frame in the output buffer.
 */
void commitEcuData (EcuFrame *ecuFrame)
{
 354:	0f 93       	push	r16
 356:	1f 93       	push	r17
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	fc 01       	movw	r30, r24
        velocitySum += ecuFrame->buffer[(ECU_VELOCITY + ecuFrame->start) % ECU_FRAME_SIZE];
 35e:	00 91 02 02 	lds	r16, 0x0202
 362:	10 91 03 02 	lds	r17, 0x0203
 366:	c6 81       	ldd	r28, Z+6	; 0x06
 368:	d0 e0       	ldi	r29, 0x00	; 0
 36a:	ce 01       	movw	r24, r28
 36c:	02 96       	adiw	r24, 0x02	; 2
 36e:	26 e0       	ldi	r18, 0x06	; 6
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	b9 01       	movw	r22, r18
 374:	0e 94 b6 02 	call	0x56c	; 0x56c <__divmodhi4>
 378:	8e 0f       	add	r24, r30
 37a:	9f 1f       	adc	r25, r31
 37c:	dc 01       	movw	r26, r24
 37e:	8c 91       	ld	r24, X
 380:	08 0f       	add	r16, r24
 382:	11 1d       	adc	r17, r1
 384:	10 93 03 02 	sts	0x0203, r17
 388:	00 93 02 02 	sts	0x0202, r16
        buffer[BUF_RPM] = ecuFrame->buffer[(ECU_RPM + ecuFrame->start) % ECU_FRAME_SIZE];
 38c:	ce 01       	movw	r24, r28
 38e:	01 96       	adiw	r24, 0x01	; 1
 390:	b9 01       	movw	r22, r18
 392:	0e 94 b6 02 	call	0x56c	; 0x56c <__divmodhi4>
 396:	8e 0f       	add	r24, r30
 398:	9f 1f       	adc	r25, r31
 39a:	dc 01       	movw	r26, r24
 39c:	8c 91       	ld	r24, X
 39e:	80 93 0c 02 	sts	0x020C, r24
        buffer[BUF_ENGINE_TEMP] = ecuFrame->buffer[(ECU_ENGINE_TEMP + ecuFrame->start) % ECU_FRAME_SIZE];
 3a2:	ce 01       	movw	r24, r28
 3a4:	04 96       	adiw	r24, 0x04	; 4
 3a6:	b9 01       	movw	r22, r18
 3a8:	0e 94 b6 02 	call	0x56c	; 0x56c <__divmodhi4>
 3ac:	8e 0f       	add	r24, r30
 3ae:	9f 1f       	adc	r25, r31
 3b0:	fc 01       	movw	r30, r24
 3b2:	80 81       	ld	r24, Z
 3b4:	80 93 0d 02 	sts	0x020D, r24
}
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	1f 91       	pop	r17
 3be:	0f 91       	pop	r16
 3c0:	08 95       	ret

000003c2 <receiveECUFrame>:

/**
 * One frame.
 */
void receiveECUFrame (void)
{
 3c2:	0f 93       	push	r16
 3c4:	1f 93       	push	r17
 3c6:	cf 93       	push	r28
 3c8:	df 93       	push	r29
 3ca:	cd b7       	in	r28, 0x3d	; 61
 3cc:	de b7       	in	r29, 0x3e	; 62
 3ce:	28 97       	sbiw	r28, 0x08	; 8
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	f8 94       	cli
 3d4:	de bf       	out	0x3e, r29	; 62
 3d6:	0f be       	out	0x3f, r0	; 63
 3d8:	cd bf       	out	0x3d, r28	; 61
        EcuFrame ecuFrame;
        fillFrame (&ecuFrame);
 3da:	8e 01       	movw	r16, r28
 3dc:	0f 5f       	subi	r16, 0xFF	; 255
 3de:	1f 4f       	sbci	r17, 0xFF	; 255
 3e0:	c8 01       	movw	r24, r16
 3e2:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <fillFrame>

        if (!waitForEcu) {
 3e6:	80 91 00 02 	lds	r24, 0x0200
 3ea:	88 23       	and	r24, r24
 3ec:	b1 f0       	breq	.+44     	; 0x41a <receiveECUFrame+0x58>
                return;
        }

        if (validateECUFrame (&ecuFrame)) {
 3ee:	c8 01       	movw	r24, r16
 3f0:	0e 94 06 01 	call	0x20c	; 0x20c <validateECUFrame>
 3f4:	88 23       	and	r24, r24
 3f6:	11 f0       	breq	.+4      	; 0x3fc <receiveECUFrame+0x3a>
                commitEcuData (&ecuFrame);
 3f8:	c8 01       	movw	r24, r16
 3fa:	0d c0       	rjmp	.+26     	; 0x416 <receiveECUFrame+0x54>
                return;
        }

        do {
                rotateFrame1 (&ecuFrame);
 3fc:	c8 01       	movw	r24, r16
 3fe:	0e 94 8d 01 	call	0x31a	; 0x31a <rotateFrame1>
        } while (!validateECUFrame (&ecuFrame) && waitForEcu);
 402:	c8 01       	movw	r24, r16
 404:	0e 94 06 01 	call	0x20c	; 0x20c <validateECUFrame>
 408:	81 11       	cpse	r24, r1
 40a:	04 c0       	rjmp	.+8      	; 0x414 <receiveECUFrame+0x52>
 40c:	80 91 00 02 	lds	r24, 0x0200
 410:	81 11       	cpse	r24, r1
 412:	f4 cf       	rjmp	.-24     	; 0x3fc <receiveECUFrame+0x3a>

        commitEcuData (&ecuFrame);
 414:	c8 01       	movw	r24, r16
 416:	0e 94 aa 01 	call	0x354	; 0x354 <commitEcuData>
}
 41a:	28 96       	adiw	r28, 0x08	; 8
 41c:	0f b6       	in	r0, 0x3f	; 63
 41e:	f8 94       	cli
 420:	de bf       	out	0x3e, r29	; 62
 422:	0f be       	out	0x3f, r0	; 63
 424:	cd bf       	out	0x3d, r28	; 61
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	1f 91       	pop	r17
 42c:	0f 91       	pop	r16
 42e:	08 95       	ret

00000430 <transmit2>:
/**
 * Transmit a byte thru USART2.
 */
void transmit2 (uint8_t byte)
{
        while ((UCSR2A & (1 << UDRE2)) == 0)
 430:	90 91 d0 00 	lds	r25, 0x00D0
 434:	95 ff       	sbrs	r25, 5
 436:	fc cf       	rjmp	.-8      	; 0x430 <transmit2>
                ; // Do nothing until UDR is ready for more data to be written to it

        UDR2 = byte;
 438:	80 93 d6 00 	sts	0x00D6, r24
 43c:	08 95       	ret

0000043e <sendToHost>:

/**
 * Send buffer to SPI master (raspberry).
 */
void sendToHost (void)
{
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
        // Send head byte
        transmit2 (SHIELD_COMMAND_BYTE);
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	0e 94 18 02 	call	0x430	; 0x430 <transmit2>
 448:	c0 e0       	ldi	r28, 0x00	; 0
 44a:	d0 e0       	ldi	r29, 0x00	; 0

        for (uint8_t i = 0; i < BUFLEN; ++i) {
                transmit2(buffer[i]);
 44c:	fe 01       	movw	r30, r28
 44e:	e6 5f       	subi	r30, 0xF6	; 246
 450:	fd 4f       	sbci	r31, 0xFD	; 253
 452:	80 81       	ld	r24, Z
 454:	0e 94 18 02 	call	0x430	; 0x430 <transmit2>
 458:	21 96       	adiw	r28, 0x01	; 1
void sendToHost (void)
{
        // Send head byte
        transmit2 (SHIELD_COMMAND_BYTE);

        for (uint8_t i = 0; i < BUFLEN; ++i) {
 45a:	c6 30       	cpi	r28, 0x06	; 6
 45c:	d1 05       	cpc	r29, r1
 45e:	b1 f7       	brne	.-20     	; 0x44c <sendToHost+0xe>
 460:	20 e0       	ldi	r18, 0x00	; 0
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	80 e0       	ldi	r24, 0x00	; 0
        }

        // Comune and send the checksum
        uint8_t checksum = 0;
        for (uint8_t i = 0; i < BUFLEN; ++i) {
                checksum += buffer[i];
 466:	f9 01       	movw	r30, r18
 468:	e6 5f       	subi	r30, 0xF6	; 246
 46a:	fd 4f       	sbci	r31, 0xFD	; 253
 46c:	90 81       	ld	r25, Z
 46e:	89 0f       	add	r24, r25
 470:	2f 5f       	subi	r18, 0xFF	; 255
 472:	3f 4f       	sbci	r19, 0xFF	; 255
                transmit2(buffer[i]);
        }

        // Comune and send the checksum
        uint8_t checksum = 0;
        for (uint8_t i = 0; i < BUFLEN; ++i) {
 474:	26 30       	cpi	r18, 0x06	; 6
 476:	31 05       	cpc	r19, r1
 478:	b1 f7       	brne	.-20     	; 0x466 <sendToHost+0x28>
                checksum += buffer[i];
        }

        transmit2 (checksum);
}
 47a:	df 91       	pop	r29
 47c:	cf 91       	pop	r28
        uint8_t checksum = 0;
        for (uint8_t i = 0; i < BUFLEN; ++i) {
                checksum += buffer[i];
        }

        transmit2 (checksum);
 47e:	0c 94 18 02 	jmp	0x430	; 0x430 <transmit2>

00000482 <checkTemp>:
/**
 *
 */
void checkTemp (void)
{
        buffer[BUF_AIR_TEMP] = ADCH;
 482:	80 91 79 00 	lds	r24, 0x0079
 486:	80 93 0f 02 	sts	0x020F, r24
 48a:	08 95       	ret

0000048c <checkGPIO>:
 */
void checkGPIO (void)
{
        uint8_t state = 0x00;

        state |= (PIN_GPIO & (1 << GPIO_FRONT_BRAKE_PIN)) << GPIO_FRONT_BRAKE_BIT;
 48c:	20 b1       	in	r18, 0x00	; 0
        state |= (PIN_GPIO & (1 << GPIO_REAR_BRAKE_PIN)) << GPIO_REAR_BRAKE_BIT;
 48e:	80 b1       	in	r24, 0x00	; 0
        state |= (PIN_GPIO & (1 << GPIO_RIGHT_TURN_PIN)) << GPIO_RIGHT_TURN_BIT;
 490:	90 b1       	in	r25, 0x00	; 0
        state |= (PIN_GPIO & (1 << GPIO_LEFT_TURN_PIN)) << GPIO_LEFT_TURN_BIT;
 492:	30 b1       	in	r19, 0x00	; 0
        state |= (PIN_GPIO & (1 << GPIO_PARKING_LIGHT_PIN)) << GPIO_PARKING_LIGHT_BIT;
 494:	40 b1       	in	r20, 0x00	; 0
 */
void checkGPIO (void)
{
        uint8_t state = 0x00;

        state |= (PIN_GPIO & (1 << GPIO_FRONT_BRAKE_PIN)) << GPIO_FRONT_BRAKE_BIT;
 496:	24 70       	andi	r18, 0x04	; 4
 498:	22 0f       	add	r18, r18
 49a:	22 0f       	add	r18, r18
        state |= (PIN_GPIO & (1 << GPIO_REAR_BRAKE_PIN)) << GPIO_REAR_BRAKE_BIT;
 49c:	88 70       	andi	r24, 0x08	; 8
 49e:	88 0f       	add	r24, r24
 4a0:	88 0f       	add	r24, r24
 4a2:	88 0f       	add	r24, r24
 4a4:	82 2b       	or	r24, r18
        state |= (PIN_GPIO & (1 << GPIO_RIGHT_TURN_PIN)) << GPIO_RIGHT_TURN_BIT;
        state |= (PIN_GPIO & (1 << GPIO_LEFT_TURN_PIN)) << GPIO_LEFT_TURN_BIT;
 4a6:	31 70       	andi	r19, 0x01	; 1
{
        uint8_t state = 0x00;

        state |= (PIN_GPIO & (1 << GPIO_FRONT_BRAKE_PIN)) << GPIO_FRONT_BRAKE_BIT;
        state |= (PIN_GPIO & (1 << GPIO_REAR_BRAKE_PIN)) << GPIO_REAR_BRAKE_BIT;
        state |= (PIN_GPIO & (1 << GPIO_RIGHT_TURN_PIN)) << GPIO_RIGHT_TURN_BIT;
 4a8:	83 2b       	or	r24, r19
 4aa:	92 70       	andi	r25, 0x02	; 2
 4ac:	99 0f       	add	r25, r25
        state |= (PIN_GPIO & (1 << GPIO_LEFT_TURN_PIN)) << GPIO_LEFT_TURN_BIT;
 4ae:	98 2b       	or	r25, r24
        state |= (PIN_GPIO & (1 << GPIO_PARKING_LIGHT_PIN)) << GPIO_PARKING_LIGHT_BIT;

        buffer[BUF_GPIO] = state;
 4b0:	90 93 0e 02 	sts	0x020E, r25
 4b4:	08 95       	ret

000004b6 <__vector_32>:
 4b6:	1f 92       	push	r1
 4b8:	0f 92       	push	r0
 4ba:	0f b6       	in	r0, 0x3f	; 63
 4bc:	0f 92       	push	r0
 4be:	11 24       	eor	r1, r1
 4c0:	2f 93       	push	r18
 4c2:	3f 93       	push	r19
 4c4:	8f 93       	push	r24
 4c6:	9f 93       	push	r25
 4c8:	80 91 08 02 	lds	r24, 0x0208
 4cc:	90 91 09 02 	lds	r25, 0x0209
 4d0:	01 96       	adiw	r24, 0x01	; 1
 4d2:	90 93 09 02 	sts	0x0209, r25
 4d6:	80 93 08 02 	sts	0x0208, r24
 4da:	80 91 08 02 	lds	r24, 0x0208
 4de:	90 91 09 02 	lds	r25, 0x0209
 4e2:	20 91 06 02 	lds	r18, 0x0206
 4e6:	30 91 07 02 	lds	r19, 0x0207
 4ea:	82 1b       	sub	r24, r18
 4ec:	93 0b       	sbc	r25, r19
 4ee:	05 97       	sbiw	r24, 0x05	; 5
 4f0:	10 f0       	brcs	.+4      	; 0x4f6 <__vector_32+0x40>
 4f2:	10 92 00 02 	sts	0x0200, r1
 4f6:	80 91 04 02 	lds	r24, 0x0204
 4fa:	90 91 05 02 	lds	r25, 0x0205
 4fe:	01 96       	adiw	r24, 0x01	; 1
 500:	90 93 05 02 	sts	0x0205, r25
 504:	80 93 04 02 	sts	0x0204, r24
 508:	8e 37       	cpi	r24, 0x7E	; 126
 50a:	91 05       	cpc	r25, r1
 50c:	a0 f0       	brcs	.+40     	; 0x536 <__vector_32+0x80>
 50e:	80 91 02 02 	lds	r24, 0x0202
 512:	90 91 03 02 	lds	r25, 0x0203
 516:	90 93 0a 02 	sts	0x020A, r25
 51a:	80 91 02 02 	lds	r24, 0x0202
 51e:	90 91 03 02 	lds	r25, 0x0203
 522:	80 93 0b 02 	sts	0x020B, r24
 526:	10 92 03 02 	sts	0x0203, r1
 52a:	10 92 02 02 	sts	0x0202, r1
 52e:	10 92 05 02 	sts	0x0205, r1
 532:	10 92 04 02 	sts	0x0204, r1
 536:	9f 91       	pop	r25
 538:	8f 91       	pop	r24
 53a:	3f 91       	pop	r19
 53c:	2f 91       	pop	r18
 53e:	0f 90       	pop	r0
 540:	0f be       	out	0x3f, r0	; 63
 542:	0f 90       	pop	r0
 544:	1f 90       	pop	r1
 546:	18 95       	reti

00000548 <main>:
/**
 *
 */
int main (void)
{
        initUSARTRaspi ();
 548:	0e 94 95 00 	call	0x12a	; 0x12a <initUSARTRaspi>
        initUSARTEcu ();
 54c:	0e 94 a5 00 	call	0x14a	; 0x14a <initUSARTEcu>
        initTimer ();
 550:	0e 94 b5 00 	call	0x16a	; 0x16a <initTimer>
        initInitGPIO ();
 554:	0e 94 c9 00 	call	0x192	; 0x192 <initInitGPIO>

        sei () ;
 558:	78 94       	sei

        while (1) {
//                PORTE ^= (1 << PE5);
                receiveECUFrame ();
 55a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <receiveECUFrame>
                checkTemp ();
 55e:	0e 94 41 02 	call	0x482	; 0x482 <checkTemp>
                checkGPIO ();
 562:	0e 94 46 02 	call	0x48c	; 0x48c <checkGPIO>
                sendToHost ();
 566:	0e 94 1f 02 	call	0x43e	; 0x43e <sendToHost>
 56a:	f7 cf       	rjmp	.-18     	; 0x55a <main+0x12>

0000056c <__divmodhi4>:
 56c:	97 fb       	bst	r25, 7
 56e:	07 2e       	mov	r0, r23
 570:	16 f4       	brtc	.+4      	; 0x576 <__divmodhi4+0xa>
 572:	00 94       	com	r0
 574:	07 d0       	rcall	.+14     	; 0x584 <__divmodhi4_neg1>
 576:	77 fd       	sbrc	r23, 7
 578:	09 d0       	rcall	.+18     	; 0x58c <__divmodhi4_neg2>
 57a:	0e 94 ca 02 	call	0x594	; 0x594 <__udivmodhi4>
 57e:	07 fc       	sbrc	r0, 7
 580:	05 d0       	rcall	.+10     	; 0x58c <__divmodhi4_neg2>
 582:	3e f4       	brtc	.+14     	; 0x592 <__divmodhi4_exit>

00000584 <__divmodhi4_neg1>:
 584:	90 95       	com	r25
 586:	81 95       	neg	r24
 588:	9f 4f       	sbci	r25, 0xFF	; 255
 58a:	08 95       	ret

0000058c <__divmodhi4_neg2>:
 58c:	70 95       	com	r23
 58e:	61 95       	neg	r22
 590:	7f 4f       	sbci	r23, 0xFF	; 255

00000592 <__divmodhi4_exit>:
 592:	08 95       	ret

00000594 <__udivmodhi4>:
 594:	aa 1b       	sub	r26, r26
 596:	bb 1b       	sub	r27, r27
 598:	51 e1       	ldi	r21, 0x11	; 17
 59a:	07 c0       	rjmp	.+14     	; 0x5aa <__udivmodhi4_ep>

0000059c <__udivmodhi4_loop>:
 59c:	aa 1f       	adc	r26, r26
 59e:	bb 1f       	adc	r27, r27
 5a0:	a6 17       	cp	r26, r22
 5a2:	b7 07       	cpc	r27, r23
 5a4:	10 f0       	brcs	.+4      	; 0x5aa <__udivmodhi4_ep>
 5a6:	a6 1b       	sub	r26, r22
 5a8:	b7 0b       	sbc	r27, r23

000005aa <__udivmodhi4_ep>:
 5aa:	88 1f       	adc	r24, r24
 5ac:	99 1f       	adc	r25, r25
 5ae:	5a 95       	dec	r21
 5b0:	a9 f7       	brne	.-22     	; 0x59c <__udivmodhi4_loop>
 5b2:	80 95       	com	r24
 5b4:	90 95       	com	r25
 5b6:	bc 01       	movw	r22, r24
 5b8:	cd 01       	movw	r24, r26
 5ba:	08 95       	ret

000005bc <_exit>:
 5bc:	f8 94       	cli

000005be <__stop_program>:
 5be:	ff cf       	rjmp	.-2      	; 0x5be <__stop_program>
