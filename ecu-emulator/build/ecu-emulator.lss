
ecu-emulator:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000b88  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000007ae  00000000  00000000  00000d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .comment      00000011  00000000  00000000  000014c6  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   8:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  10:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  14:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  18:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  1c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  20:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  24:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  28:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  2c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  30:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  34:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  38:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  3c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  40:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  44:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  48:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  4c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  50:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  54:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  58:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  5c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  60:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  64:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  68:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  6c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  70:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d4 e0       	ldi	r29, 0x04	; 4
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	0e 94 5d 00 	call	0xba	; 0xba <main>
  84:	0c 94 9c 00 	jmp	0x138	; 0x138 <_exit>

00000088 <__bad_interrupt>:
  88:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008c <initUSART>:
/**
 * Transmission only.
 */
void initUSART (void)
{
        UCSR1B |= (1 << TXEN1) | (1 << RXEN1);
  8c:	e9 ec       	ldi	r30, 0xC9	; 201
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	88 61       	ori	r24, 0x18	; 24
  94:	80 83       	st	Z, r24
        UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
  96:	ea ec       	ldi	r30, 0xCA	; 202
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	86 60       	ori	r24, 0x06	; 6
  9e:	80 83       	st	Z, r24
        UBRR1H = (BAUD_PRESCALE >> 8);
  a0:	10 92 cd 00 	sts	0x00CD, r1
        UBRR1L = BAUD_PRESCALE;
  a4:	8d e3       	ldi	r24, 0x3D	; 61
  a6:	80 93 cc 00 	sts	0x00CC, r24
  aa:	08 95       	ret

000000ac <sendByteEcu>:
}

void sendByteEcu (uint8_t byte)
{
        while ((UCSR1A & (1 << UDRE1)) == 0)
  ac:	90 91 c8 00 	lds	r25, 0x00C8
  b0:	95 ff       	sbrs	r25, 5
  b2:	fc cf       	rjmp	.-8      	; 0xac <sendByteEcu>
                ; // Do nothing until UDR is ready for more data to be written to it

        UDR1 = byte;
  b4:	80 93 ce 00 	sts	0x00CE, r24
  b8:	08 95       	ret

000000ba <main>:
/**
 *
 */
int main (void)
{
        initUSART ();
  ba:	0e 94 46 00 	call	0x8c	; 0x8c <initUSART>
        DDRB = 1 << PB0;
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	84 b9       	out	0x04, r24	; 4

        while (1) {
                sendByteEcu(0x01);
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	0e 94 56 00 	call	0xac	; 0xac <sendByteEcu>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	8f e3       	ldi	r24, 0x3F	; 63
  ca:	9f e1       	ldi	r25, 0x1F	; 31
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <main+0x12>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x18>
  d2:	00 00       	nop
                _delay_ms (2);
                sendByteEcu(0x56);
  d4:	86 e5       	ldi	r24, 0x56	; 86
  d6:	0e 94 56 00 	call	0xac	; 0xac <sendByteEcu>
  da:	8f e9       	ldi	r24, 0x9F	; 159
  dc:	9f e0       	ldi	r25, 0x0F	; 15
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <main+0x24>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x2a>
  e4:	00 00       	nop
                _delay_ms (1);
                sendByteEcu(0x05);
  e6:	85 e0       	ldi	r24, 0x05	; 5
  e8:	0e 94 56 00 	call	0xac	; 0xac <sendByteEcu>
  ec:	8f e9       	ldi	r24, 0x9F	; 159
  ee:	9f e0       	ldi	r25, 0x0F	; 15
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x36>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x3c>
  f6:	00 00       	nop
                _delay_ms (1);
                sendByteEcu(0x00);
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	0e 94 56 00 	call	0xac	; 0xac <sendByteEcu>
  fe:	8f e9       	ldi	r24, 0x9F	; 159
 100:	9f e0       	ldi	r25, 0x0F	; 15
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <main+0x48>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x4e>
 108:	00 00       	nop
                _delay_ms (1);
                sendByteEcu(0x77);
 10a:	87 e7       	ldi	r24, 0x77	; 119
 10c:	0e 94 56 00 	call	0xac	; 0xac <sendByteEcu>
 110:	8f e9       	ldi	r24, 0x9F	; 159
 112:	9f e0       	ldi	r25, 0x0F	; 15
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <main+0x5a>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x60>
 11a:	00 00       	nop
                _delay_ms (1);
                sendByteEcu(0xd2);
 11c:	82 ed       	ldi	r24, 0xD2	; 210
 11e:	0e 94 56 00 	call	0xac	; 0xac <sendByteEcu>
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	9c e7       	ldi	r25, 0x7C	; 124
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <main+0x6c>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0x72>
 12c:	00 00       	nop
                _delay_ms (8);
                PORTB ^= 1 << PB0;
 12e:	85 b1       	in	r24, 0x05	; 5
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	89 27       	eor	r24, r25
 134:	85 b9       	out	0x05, r24	; 5
 136:	c5 cf       	rjmp	.-118    	; 0xc2 <main+0x8>

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
